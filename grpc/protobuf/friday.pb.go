// Code generated by protoc-gen-go. DO NOT EDIT.
// source: friday.proto

/*
Package friday is a generated protocol buffer package.

It is generated from these files:
	friday.proto

It has these top-level messages:
	UserInfoRequest
	UserInfoResponse
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 请求用户信息
type UserInfoRequest struct {
	Uid int64 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *UserInfoRequest) Reset()                    { *m = UserInfoRequest{} }
func (m *UserInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*UserInfoRequest) ProtoMessage()               {}
func (*UserInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UserInfoRequest) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

// 请求用户信息的结果
type UserInfoResponse struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Age   uint32 `protobuf:"varint,2,opt,name=age" json:"age,omitempty"`
	Sex   uint32 `protobuf:"varint,3,opt,name=sex" json:"sex,omitempty"`
	Count uint32 `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *UserInfoResponse) Reset()                    { *m = UserInfoResponse{} }
func (m *UserInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*UserInfoResponse) ProtoMessage()               {}
func (*UserInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfoResponse) GetAge() uint32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *UserInfoResponse) GetSex() uint32 {
	if m != nil {
		return m.Sex
	}
	return 0
}

func (m *UserInfoResponse) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*UserInfoRequest)(nil), "friday.UserInfoRequest")
	proto.RegisterType((*UserInfoResponse)(nil), "friday.UserInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Data service

type DataClient interface {
	// 简单Rpc
	// 获取用户数据
	GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	//  修改用户 双向流模式
	ChangeUserInfo(ctx context.Context, opts ...grpc.CallOption) (Data_ChangeUserInfoClient, error)
}

type dataClient struct {
	cc *grpc.ClientConn
}

func NewDataClient(cc *grpc.ClientConn) DataClient {
	return &dataClient{cc}
}

func (c *dataClient) GetUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := grpc.Invoke(ctx, "/friday.Data/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataClient) ChangeUserInfo(ctx context.Context, opts ...grpc.CallOption) (Data_ChangeUserInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Data_serviceDesc.Streams[0], c.cc, "/friday.Data/ChangeUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &dataChangeUserInfoClient{stream}
	return x, nil
}

type Data_ChangeUserInfoClient interface {
	Send(*UserInfoResponse) error
	Recv() (*UserInfoResponse, error)
	grpc.ClientStream
}

type dataChangeUserInfoClient struct {
	grpc.ClientStream
}

func (x *dataChangeUserInfoClient) Send(m *UserInfoResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dataChangeUserInfoClient) Recv() (*UserInfoResponse, error) {
	m := new(UserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Data service

type DataServer interface {
	// 简单Rpc
	// 获取用户数据
	GetUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	//  修改用户 双向流模式
	ChangeUserInfo(Data_ChangeUserInfoServer) error
}

func RegisterDataServer(s *grpc.Server, srv DataServer) {
	s.RegisterService(&_Data_serviceDesc, srv)
}

func _Data_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/friday.Data/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServer).GetUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Data_ChangeUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DataServer).ChangeUserInfo(&dataChangeUserInfoServer{stream})
}

type Data_ChangeUserInfoServer interface {
	Send(*UserInfoResponse) error
	Recv() (*UserInfoResponse, error)
	grpc.ServerStream
}

type dataChangeUserInfoServer struct {
	grpc.ServerStream
}

func (x *dataChangeUserInfoServer) Send(m *UserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dataChangeUserInfoServer) Recv() (*UserInfoResponse, error) {
	m := new(UserInfoResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Data_serviceDesc = grpc.ServiceDesc{
	ServiceName: "friday.Data",
	HandlerType: (*DataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _Data_GetUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChangeUserInfo",
			Handler:       _Data_ChangeUserInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "friday.proto",
}

func init() { proto.RegisterFile("friday.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 203 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x2b, 0xca, 0x4c,
	0x49, 0xac, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x94, 0xb9, 0xf8,
	0x43, 0x8b, 0x53, 0x8b, 0x3c, 0xf3, 0xd2, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x04, 0xb8, 0x98, 0x4b, 0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x40, 0x4c, 0xa5,
	0x04, 0x2e, 0x01, 0x84, 0xa2, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x21, 0x2e, 0x96, 0xbc,
	0xc4, 0xdc, 0x54, 0xb0, 0x32, 0xce, 0x20, 0x30, 0x1b, 0xa4, 0x33, 0x31, 0x3d, 0x55, 0x82, 0x49,
	0x81, 0x51, 0x83, 0x37, 0x08, 0xc4, 0x04, 0x89, 0x14, 0xa7, 0x56, 0x48, 0x30, 0x43, 0x44, 0x8a,
	0x53, 0x2b, 0x84, 0x44, 0xb8, 0x58, 0x93, 0xf3, 0x4b, 0xf3, 0x4a, 0x24, 0x58, 0xc0, 0x62, 0x10,
	0x8e, 0xd1, 0x34, 0x46, 0x2e, 0x16, 0x97, 0xc4, 0x92, 0x44, 0x21, 0x27, 0x2e, 0x6e, 0xf7, 0xd4,
	0x12, 0x98, 0x6d, 0x42, 0xe2, 0x7a, 0x50, 0x57, 0xa3, 0x39, 0x52, 0x4a, 0x02, 0x53, 0x02, 0xe2,
	0x30, 0x25, 0x06, 0x21, 0x2f, 0x2e, 0x3e, 0xe7, 0x8c, 0xc4, 0xbc, 0xf4, 0x54, 0xb8, 0x31, 0x38,
	0x55, 0xe3, 0x33, 0x47, 0x83, 0xd1, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x5c, 0xc6, 0x80, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x04, 0x08, 0x29, 0x79, 0x3e, 0x01, 0x00, 0x00,
}
